import tkinter as tk
from tkinter import ttk, messagebox
import database  # —Ñ–∞–π–ª database.py
from datetime import date, timedelta
import re 

# –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ –≤ Treeview ‚Üí –∏–º—è –ø–æ–ª—è –≤ –ë–î
COLUMN_MAP = {
    "#2": "name",                # –∫–æ–ª–æ–Ω–∫–∞ ¬´–ò–º—è¬ª
    "#3": "species",             # –∫–æ–ª–æ–Ω–∫–∞ ¬´–í–∏–¥¬ª
    "#4": "birth_date",          # –∫–æ–ª–æ–Ω–∫–∞ ¬´–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è¬ª
    "#6": "arrival_date",        # –∫–æ–ª–æ–Ω–∫–∞ ¬´–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è¬ª
    "#7": "cage_number",         # –∫–æ–ª–æ–Ω–∫–∞ ¬´–ö–ª–µ—Ç–∫–∞¬ª
    "#8": "quarantine_until",    # –∫–æ–ª–æ–Ω–∫–∞ ¬´–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞¬ª
    # —Å—Ç–æ–ª–±–µ—Ü "#9" ‚Äî —ç—Ç–æ ¬´Del¬ª, –µ–≥–æ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
}
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
database.init_db()

# –§—É–Ω–∫—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π

def blink_row(item):
    current = list(tree.item(item, 'tags'))
    if 'expired' in current:
        # –≤—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –∑–µ–ª—ë–Ω—ã–π —Ñ–æ–Ω
        new_tags = [t for t in current if t != 'expired']
    else:
        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–µ–ª—ë–Ω—ã–π —Ñ–æ–Ω
        new_tags = current + ['expired']
    tree.item(item, tags=new_tags)
    blink_timers[item] = root.after(100, lambda: blink_row(item))

# –≤–µ—Ä–Ω—ë—Ç –¥–∞—Ç—É, –æ—Ç—Å—Ç–æ—è—â—É—é –Ω–∞ `months` –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥ –æ—Ç today
def subtract_months(today: date, months: int) -> date:
    total = today.year * 12 + today.month - 1 - months
    year = total // 12
    month = total % 12 + 1
    day = min(today.day, (date(year + (month // 12), (month % 12) + 1, 1) - timedelta(days=1)).day)
    return date(year, month, day)

def on_tree_click(event):
    # —Ç–æ–ª—å–∫–æ —è—á–µ–π–∫–∏
    if tree.identify("region", event.x, event.y) != "cell":
        return

    # –≤—ã—è—Å–Ω—è–µ–º, –Ω–∞ –∫–∞–∫—É—é –∫–æ–ª–æ–Ω–∫—É –∫–ª–∏–∫–Ω—É–ª–∏
    col_id = tree.identify_column(event.x)      # —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "#1", "#2", ...
    col_index = int(col_id.replace("#", "")) - 1
    col_name = tree["columns"][col_index]        # –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ columns = (...)

    # –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ ¬´Del¬ª ‚Äî —É–¥–∞–ª—è–µ–º
    if col_name == "Del":
        row_id = tree.identify_row(event.y)
        if not row_id:
            return
        animal_id = tree.item(row_id)["values"][0]
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å ID {animal_id}?"):
            database.delete_animal(animal_id)
            refresh_list()


def on_double_click(event):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∏–∫–∏ –ø–æ —è—á–µ–π–∫–∞–º
    if tree.identify("region", event.x, event.y) != "cell":
        return

    col_id = tree.identify_column(event.x)  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "#4"
    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏—à—å —Ç–µ –∫–æ–ª–æ–Ω–∫–∏, —á—Ç–æ –≤ COLUMN_MAP
    if col_id not in COLUMN_MAP:
        return

    row_id = tree.identify_row(event.y)
    if not row_id:
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—è –≤ –ë–î
    field = COLUMN_MAP[col_id]
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏
    x, y, width, height = tree.bbox(row_id, col_id)
    old_value = tree.set(row_id, col_id)

    entry = tk.Entry(tree)
    entry.place(x=x, y=y, width=width, height=height)
    entry.insert(0, old_value)
    entry.focus()

    def save_edit(e):
        new_value = entry.get().strip()

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∫–ª–µ—Ç–∫–∏
        if field == "cage_number":
            if not re.fullmatch(r'^[–ö–û][0-9A-Fa-f]{4}$', new_value):
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∞ '–ö0000' –∏–ª–∏ '–û0000'")
                entry.focus()
                return
            occupied = database.get_all_cage_numbers()
            if new_value in occupied and new_value != old_value:
                messagebox.showwarning("–û—à–∏–±–∫–∞", f"–ö–ª–µ—Ç–∫–∞ {new_value} —É–∂–µ –∑–∞–Ω—è—Ç–∞")
                entry.focus()
                return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞
        if field == "quarantine_until":
            try:
                date.fromisoformat(new_value)
            except ValueError:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å YYYY-MM-DD")
                entry.focus()
                return

        # –û–±—â–∏–π —Å–ª—É—á–∞–π ‚Äî –ø—Ä–∞–≤–∫–∞ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—è
        animal_id = tree.item(row_id)["values"][0]
        database.update_animal_field(animal_id, field, new_value)
        entry.destroy()
        refresh_list()

    entry.bind("<Return>", save_edit)
    entry.bind("<FocusOut>", save_edit)


def add():
    name = entry_name.get().strip()
    species = entry_species.get().strip()
    bd = entry_birth.get().strip()
    est = entry_est.get().strip()
    arrival = entry_arrival.get().strip() or date.today().isoformat()
    cage = entry_cage.get().strip()
    quarantine_until = entry_quarantine.get().strip()

    if not name:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–µ—Ç–∫–∞ –Ω–µ –∑–∞–Ω—è—Ç–∞
    if cage in database.get_all_cage_numbers():
        messagebox.showwarning("–û—à–∏–±–∫–∞", f"–ö–ª–µ—Ç–∫–∞ {cage} —É–∂–µ –∑–∞–Ω—è—Ç–∞")
        return

    # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è / –æ—Ü–µ–Ω–∫–∞
    if bd:
        try:
            bdate = date.fromisoformat(bd)
            est_flag = 0
        except ValueError:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è")
            return
    elif est:
        try:
            months = int(est)
            today = date.today()
            year = today.year - (months // 12)
            month = today.month - (months % 12)
            if month <= 0:
                year -= 1
                month += 12
            bdate = date(year, month, today.day)
            est_flag = 1
        except ValueError:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
    else:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ü–µ–Ω–∫—É –≤–æ–∑—Ä–∞—Å—Ç–∞")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç quarantine_until
    try:
        qdate = date.fromisoformat(quarantine_until)
    except ValueError:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞")
        return

    database.add_animal(
        name,
        species,
        bdate.isoformat(),
        est_flag,
        arrival,
        cage,
        qdate.isoformat()
    )
    messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–ñ–∏–≤–æ—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    refresh_list()


def refresh_list():
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –º–∏–≥–∞–Ω–∏—è
    for item, timer in list(blink_timers.items()):
        root.after_cancel(timer)
    blink_timers.clear()

    # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    tree.delete(*tree.get_children())

    today = date.today()
    for (id_, name, species, bd, est_flag,
         arr, cage, quarantine_until) in database.get_all_animals():

        # –≤–æ–∑—Ä–∞—Å—Ç
        bdate = date.fromisoformat(bd)
        months = (today.year * 12 + today.month) - (bdate.year * 12 + bdate.month)
        age_disp = f"~{months}" if est_flag else str(months)
        bd_disp = f"~{bd}" if est_flag else bd

        # –≤—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏ –¥–æ –∫–æ–Ω—Ü–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞ –∏ –≤—ã–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏
        days_left = ""
        tags = ()
        if cage.startswith("–ö") and quarantine_until:
            try:
                qdate = date.fromisoformat(quarantine_until)
                days_left = max((qdate - today).days, 0)
            except:
                days_left = ""
            if days_left > 0:
                tags = ('quarantine',)
            else:
                tags = ('expired',)

        values = (
            id_, name, species,
            bd_disp, age_disp,
            arr or "",
            cage, days_left, "üóë"
        )
        item = tree.insert('', 'end', values=values, tags=tags)

        # –µ—Å–ª–∏ –∫–∞—Ä–∞–Ω—Ç–∏–Ω –∑–∞–∫–æ–Ω—á–∏–ª—Å—è ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥–∞–Ω–∏–µ
        if 'expired' in tags:
            blink_row(item)


def toggle_fullscreen(event=None):
    global fullscreen
    fullscreen = not fullscreen
    root.attributes("-fullscreen", fullscreen)


def end_fullscreen(event=None):
    global fullscreen
    fullscreen = False
    root.attributes("-fullscreen", False)

def delete():
    sel = tree.selection()
    if not sel:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    animal_id = tree.item(sel[0])['values'][0]
    if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ —Å ID {animal_id}?"):
        database.delete_animal(animal_id)
        refresh_list()

def get_default_quarantine_cage():
    taken = database.get_all_cage_numbers()
    # –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–Ω—ã–µ: –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "–ö" –∏ 4 hex-—Ü–∏—Ñ—Ä—ã
    used = {int(cn[1:], 16) for cn in taken if cn.startswith("–ö")}
    for i in range(0x10000):
        if i not in used:
            return f"–ö{i:04X}"
    raise RuntimeError("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–∞—Ä–∞–Ω—Ç–∏–Ω–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫")

# –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
root = tk.Tk()
root.title("–ü—Ä–∏—é—Ç: —É—á—ë—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö")
root.columnconfigure(2, weight=1)
fullscreen = False

# –†–∞–∑—Ä–µ—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –≤–µ—Å–∞ —Å–µ—Ç–∫–∏
root.rowconfigure(5, weight=1)
root.columnconfigure(0, weight=1)
root.columnconfigure(1, weight=1)
root.columnconfigure(2, weight=0)  # —Ç—Ä–µ—Ç—å—è –∫–æ–ª–æ–Ω–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π

# —Å—Ç—Ä–æ–∫–∞ 5 (–≥–¥–µ –±—É–¥–µ—Ç —Ç–∞–±–ª–∏—Ü–∞) —Ç–æ–∂–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
root.rowconfigure(5, weight=1)

# === –§–†–ï–ô–ú –î–õ–Ø –û–°–ù–û–í–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò ===


frm_inputs = ttk.LabelFrame(root, text="–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
frm_inputs.grid(row=0, column=0, padx=5, pady=5, sticky="nsew")
# –î–µ–ª–∞–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –≤—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü (–≤–≤–æ–¥) —Ä–∞—Å—Ç—è–≥–∏–≤–∞–ª—Å—è,
# –∞ –ø–µ—Ä–≤—ã–π (–º–µ—Ç–∫–∏) ‚Äî –Ω–µ—Ç
frm_inputs.columnconfigure(0, weight=0)
frm_inputs.columnconfigure(1, weight=1)

ttk.Label(frm_inputs, text="–ò–º—è").grid(row=0, column=0, sticky="w", pady=2)
entry_name = ttk.Entry(frm_inputs)
entry_name.grid(row=0, column=1, sticky="ew", pady=2)

ttk.Label(frm_inputs, text="–í–∏–¥").grid(row=1, column=0, sticky="w", pady=2)
entry_species = ttk.Entry(frm_inputs)
entry_species.grid(row=1, column=1, sticky="ew", pady=2)

ttk.Label(frm_inputs, text="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è\n(YYYY-MM-DD)").grid(row=2, column=0, sticky="w", pady=2)
entry_birth = ttk.Entry(frm_inputs)
entry_birth.grid(row=2, column=1, sticky="ew", pady=2)

ttk.Label(frm_inputs, text="–ò–õ–ò –æ—Ü–µ–Ω–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞\n(–º–µ—Å—è—Ü—ã)").grid(row=3, column=0, sticky="w", pady=2)
entry_est = ttk.Entry(frm_inputs)
entry_est.grid(row=3, column=1, sticky="ew", pady=2)

ttk.Label(frm_inputs, text="–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è\n(YYYY-MM-DD)").grid(row=4, column=0, sticky="w", pady=2)
entry_arrival = ttk.Entry(frm_inputs)
entry_arrival.grid(row=4, column=1, sticky="ew", pady=2)


# === –§–†–ï–ô–ú –î–õ–Ø –ö–õ–ï–¢–ö–ò –ò –ö–ê–†–ê–ù–¢–ò–ù–ê ===
frm_quarantine = ttk.LabelFrame(root, text="–ö–ª–µ—Ç–∫–∞ / –ö–∞—Ä–∞–Ω—Ç–∏–Ω")
frm_quarantine.grid(row=0, column=1, padx=5, pady=5, sticky="nsew")
frm_quarantine.columnconfigure(0, weight=0)
frm_quarantine.columnconfigure(1, weight=1)

ttk.Label(frm_quarantine, text="–ö–ª–µ—Ç–∫–∞").grid(row=0, column=0, sticky="w", pady=2)
entry_cage = ttk.Entry(frm_quarantine)
entry_cage.grid(row=0, column=1, sticky="ew", pady=2)
entry_cage.insert(0, get_default_quarantine_cage())

ttk.Label(frm_quarantine, text="–û–∫–æ–Ω—á–∞–Ω–∏–µ\n–∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞").grid(row=1, column=0, sticky="w", pady=2)
entry_quarantine = ttk.Entry(frm_quarantine)
entry_quarantine.grid(row=1, column=1, sticky="ew", pady=2)
entry_quarantine.insert(0, (date.today() + timedelta(days=10)).isoformat())


# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É root —Ç–æ–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤–µ—Å–∞,
# —á—Ç–æ–±—ã –æ–±–∞ —Ñ—Ä–µ–π–º–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–ª–∏—Å—å –ø–æ—Ä–æ–≤–Ω—É:
root.columnconfigure(0, weight=1)
root.columnconfigure(1, weight=1)


# –ö–Ω–æ–ø–∫–∏
frm_buttons = ttk.Frame(root, padding=(10, 5))
frm_buttons.grid(row=4, column=0, columnspan=2, sticky="ew")
frm_buttons.columnconfigure(0, weight=1)
frm_buttons.columnconfigure(1, weight=1)

btn_add = ttk.Button(frm_buttons, text="–î–æ–±–∞–≤–∏—Ç—å", command=add)
btn_add.grid(row=0, column=0, sticky="ew", padx=5)
btn_refresh = ttk.Button(frm_buttons, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", command=refresh_list)
btn_refresh.grid(row=0, column=1, sticky="ew", padx=5)


# ======= –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï COLUMNS =======
columns = (
    "ID", "–ò–º—è", "–í–∏–¥",
    "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–í–æ–∑—Ä–∞—Å—Ç (–º–µ—Å.)",
    "–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è",
    "–ö–ª–µ—Ç–∫–∞", "–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞", "Del"
)

# ======= FRAME –î–õ–Ø –¢–ê–ë–õ–ò–¶–´ –ò –°–ö–†–û–õ–õ–ë–ê–†–ê =======
table_frame = ttk.Frame(root)
table_frame.grid(row=5, column=0, columnspan=3, sticky='nsew')
table_frame.rowconfigure(0, weight=1)
table_frame.columnconfigure(0, weight=1)



# ======= –°–û–ó–î–ê–Å–ú Treeview =======



tree = ttk.Treeview(
    table_frame,
    columns=columns,
    show='headings'
)
# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –±–∞–∑–æ–≤—ã–µ —à–∏—Ä–∏–Ω—ã
for col in columns:
    tree.heading(col, text= col)
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
tree.column("ID", width=20, anchor='center')
tree.column("–ò–º—è",width=100, anchor='center')
tree.column("–í–∏–¥",width=100, anchor='center')
tree.column("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", width=100, anchor='center')
tree.column("–í–æ–∑—Ä–∞—Å—Ç (–º–µ—Å.)", width=90, anchor='center')
tree.column("–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è", width=100, anchor='center')
tree.column("–ö–ª–µ—Ç–∫–∞", width=70, anchor='center')
tree.column("–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞", width=150, anchor='center')
tree.column("Del", width=30, anchor='center')

# ======= –°–ö–†–û–õ–õ–ë–ê–† =======
vsb = ttk.Scrollbar(table_frame, orient='vertical', command=tree.yview)
tree.configure(yscrollcommand=vsb.set)

# ======= –†–ê–ó–ú–ï–©–ï–ù–ò–ï =======
tree.grid(row=0, column=0, sticky='nsew')
vsb.grid(row=0, column=1, sticky='ns')

# ======= –ë–ò–ù–î–ò–ù–ì–ò =======
tree.bind("<Button-1>", on_tree_click)
tree.bind("<Double-1>", on_double_click)

# ‚Äî —Ç–µ–≥–∏ –¥–ª—è —Ä–∞—Å–∫—Ä–∞—Å–∫–∏ —Å—Ç—Ä–æ–∫
tree.tag_configure('quarantine', background='#FFF59D')
tree.tag_configure('expired', background='#C8E6C9')

# –ü—Ä–∏–≤—è–∑–∫–∞ –∫–ª–∞–≤–∏—à
root.bind('<F11>', toggle_fullscreen)
root.bind('<Escape>', end_fullscreen)
tree.bind("<Button-1>", on_tree_click)
tree.bind("<Double-1>", on_double_click)

# —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Ç–∞–π–º–µ—Ä–æ–≤ –º–∏–≥–∞–Ω–∏—è
blink_timers = {}

# –ó–∞–ø—É—Å–∫
refresh_list()
root.mainloop()

