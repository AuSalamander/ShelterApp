import tkinter as tk
from tkinter import ttk, messagebox
import database  # —Ñ–∞–π–ª database.py
from datetime import date

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
database.init_db()

# –§—É–Ω–∫—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π

def on_tree_click(event):
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –∫–ª–∏–∫–Ω—É–ª–∏
    region = tree.identify("region", event.x, event.y)
    col = tree.identify_column(event.x)
    row = tree.identify_row(event.y)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —è—á–µ–π–∫–∞ —Å—Ç–æ–ª–±—Ü–∞ Del (—ç—Ç–æ —à–µ—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü: "#6")
    if region == "cell" and col == "#6" and row:
        animal_id = tree.item(row)['values'][0]
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å ID {animal_id}?"):
            database.delete_animal(animal_id)
            refresh_list()

def add():
    name = entry_name.get().strip()
    species = entry_species.get().strip()
    age_text = entry_age.get().strip()
    arrival = entry_arrival.get().strip() or date.today().isoformat()
    try:
        age = int(age_text) if age_text else 0
    except ValueError:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    if not name:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
        return
    database.add_animal(name, species, age, arrival)
    messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–ñ–∏–≤–æ—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    refresh_list()


def refresh_list():
    for row in tree.get_children():
        tree.delete(row)
    for animal in database.get_all_animals():
        tree.insert('', 'end', values=(
            animal[0],  # ID
            animal[1],  # –∏–º—è
            animal[2],  # –≤–∏–¥
            animal[3],  # –≤–æ–∑—Ä–∞—Å—Ç
            animal[4],  # –¥–∞—Ç–∞
            "üóë"         # –∏–∫–æ–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        ))


def toggle_fullscreen(event=None):
    global fullscreen
    fullscreen = not fullscreen
    root.attributes("-fullscreen", fullscreen)


def end_fullscreen(event=None):
    global fullscreen
    fullscreen = False
    root.attributes("-fullscreen", False)

def delete():
    sel = tree.selection()
    if not sel:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    animal_id = tree.item(sel[0])['values'][0]
    if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ —Å ID {animal_id}?"):
        database.delete_animal(animal_id)
        refresh_list()


# –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
root = tk.Tk()
root.title("–ü—Ä–∏—é—Ç: —É—á—ë—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö")
root.columnconfigure(2, weight=1)
fullscreen = False

# –†–∞–∑—Ä–µ—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –≤–µ—Å–∞ —Å–µ—Ç–∫–∏
root.rowconfigure(5, weight=1)
root.columnconfigure(0, weight=1)
root.columnconfigure(1, weight=1)

# –ü–æ–ª—è –≤–≤–æ–¥–∞
frm_inputs = ttk.Frame(root, padding=(10, 10))
frm_inputs.grid(row=0, column=0, columnspan=2, sticky="ew")

for i in range(4):
    frm_inputs.columnconfigure(i, weight=1)

ttk.Label(frm_inputs, text="–ò–º—è").grid(row=0, column=0, sticky="w")
entry_name = ttk.Entry(frm_inputs)
entry_name.grid(row=0, column=1, sticky="ew", padx=5)

ttk.Label(frm_inputs, text="–í–∏–¥").grid(row=1, column=0, sticky="w")
entry_species = ttk.Entry(frm_inputs)
entry_species.grid(row=1, column=1, sticky="ew", padx=5)

ttk.Label(frm_inputs, text="–í–æ–∑—Ä–∞—Å—Ç").grid(row=2, column=0, sticky="w")
entry_age = ttk.Entry(frm_inputs)
entry_age.grid(row=2, column=1, sticky="ew", padx=5)

ttk.Label(frm_inputs, text="–î–∞—Ç–∞ (YYYY-MM-DD)").grid(row=3, column=0, sticky="w")
entry_arrival = ttk.Entry(frm_inputs)
entry_arrival.grid(row=3, column=1, sticky="ew", padx=5)

# –ö–Ω–æ–ø–∫–∏
frm_buttons = ttk.Frame(root, padding=(10, 5))
frm_buttons.grid(row=4, column=0, columnspan=2, sticky="ew")
frm_buttons.columnconfigure(0, weight=1)
frm_buttons.columnconfigure(1, weight=1)

btn_add = ttk.Button(frm_buttons, text="–î–æ–±–∞–≤–∏—Ç—å", command=add)
btn_add.grid(row=0, column=0, sticky="ew", padx=5)
btn_refresh = ttk.Button(frm_buttons, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", command=refresh_list)
btn_refresh.grid(row=0, column=1, sticky="ew", padx=5)


# –¢–∞–±–ª–∏—Ü–∞
columns = ("ID", "–ò–º—è", "–í–∏–¥", "–í–æ–∑—Ä–∞—Å—Ç", "–î–∞—Ç–∞", "Del")
tree = ttk.Treeview(root, columns=columns, show='headings')
for idx, col in enumerate(columns):
    tree.heading(col, text=col)
    tree.column(col, anchor="center")
tree.grid(row=5, column=0, columnspan=2, sticky="nsew", padx=10, pady=5)
for col in columns:
    heading = "" if col == "Del" else col
    tree.heading(col, text=heading)
# —Å—Ç–æ–ª–±–µ—Ü —Å –∏–∫–æ–Ω–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
tree.column("Del", width=30, anchor="center")

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
scroll = ttk.Scrollbar(root, orient="vertical", command=tree.yview)
tree.configure(yscroll=scroll.set)
scroll.grid(row=5, column=2, sticky="ns")

# –ü—Ä–∏–≤—è–∑–∫–∞ –∫–ª–∞–≤–∏—à –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
root.bind('<F11>', toggle_fullscreen)
root.bind('<Escape>', end_fullscreen)
tree.bind("<Button-1>", on_tree_click)

# –ó–∞–ø—É—Å–∫
refresh_list()
root.mainloop()

