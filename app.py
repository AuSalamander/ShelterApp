import tkinter as tk
from tkinter import ttk, messagebox
import database  # —Ñ–∞–π–ª database.py
from datetime import date

# –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ –≤ Treeview ‚Üí –∏–º—è –ø–æ–ª—è –≤ –ë–î
COLUMN_MAP = {
    "#2": "name",
    "#3": "species",
    "#4": "birth_date",
    "#5": "age_months",   
    "#6": "arrival_date",
    "#7": "Del",
}
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
database.init_db()

# –§—É–Ω–∫—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π

def on_tree_click(event):
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –∫–ª–∏–∫–Ω—É–ª–∏
    region = tree.identify("region", event.x, event.y)
    col = tree.identify_column(event.x)
    row = tree.identify_row(event.y)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —è—á–µ–π–∫–∞ —Å—Ç–æ–ª–±—Ü–∞ Del (—ç—Ç–æ —à–µ—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü: "#6")
    if region == "cell" and col == "#7" and row:
        animal_id = tree.item(row)['values'][0]
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å ID {animal_id}?"):
            database.delete_animal(animal_id)
            refresh_list()

def on_double_click(event):
    # —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å —è—á–µ–π–∫–∞–º–∏
    if tree.identify("region", event.x, event.y) != "cell":
        return
    col = tree.identify_column(event.x)
    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–∫–∏, —á—Ç–æ –µ—Å—Ç—å –≤ –º–∞–ø–µ
    if col not in COLUMN_MAP:
        return
    row = tree.identify_row(event.y)
    if not row:
        return

    # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏
    x, y, width, height = tree.bbox(row, col)
    old_value = tree.set(row, col)

    # —Å–æ–∑–¥–∞—ë–º Entry –ø—Ä—è–º–æ –Ω–∞–¥ —è—á–µ–π–∫–æ–π
    entry = tk.Entry(tree)
    entry.place(x=x, y=y, width=width, height=height)
    entry.insert(0, old_value)
    entry.focus()

    def save_edit(e):
        new_value = entry.get()
        animal_id = tree.item(row)['values'][0]
        field = COLUMN_MAP[col]
        database.update_animal_field(animal_id, field, new_value)
        entry.destroy()
        refresh_list()

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —É—Ö–æ–¥–µ —Ñ–æ–∫—É—Å–∞ –∏ –Ω–∞ Enter
    entry.bind("<FocusOut>", save_edit)
    entry.bind("<Return>", save_edit)

def add():
    name = entry_name.get().strip()
    species = entry_species.get().strip()
    bd = entry_birth.get().strip()
    est = entry_est.get().strip()
    arrival = entry_arrival.get().strip() or date.today().isoformat()
    if not name:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"); return
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥
    if bd:
        # –µ—Å–ª–∏ —É–∫–∞–∑–∞–ª–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî –≤—ã—á–∏—Å–ª—è–µ–º –º–µ—Å—è—Ü—ã
        try:
            y, m, d = map(int, bd.split('-'))
            bdate = date(y, m, d)
            delta = date.today().year*12 + date.today().month - (y*12 + m)
            age_m = delta
            est_flag = 0
        except:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"); return
    elif est:
        try:
            age_m = int(est)
            est_flag = 1
            bdate = None
        except:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º"); return
    else:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ü–µ–Ω–∫—É –≤–æ–∑—Ä–∞—Å—Ç–∞"); return
    database.add_animal(name, species, bdate.isoformat() if bdate else None, age_m, est_flag, arrival)
    messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–ñ–∏–≤–æ—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    refresh_list()


def refresh_list():
    tree.delete(*tree.get_children())
    for id_, name, species, bd, months, est_flag, arr in database.get_all_animals():
        bd_disp = bd or ""
        age_disp = f"~{months}" if est_flag else str(months)
        arr_disp = arr or ""
        tree.insert('', 'end', values=(id_, name, species, bd_disp, age_disp, arr_disp, "üóë"))


def toggle_fullscreen(event=None):
    global fullscreen
    fullscreen = not fullscreen
    root.attributes("-fullscreen", fullscreen)


def end_fullscreen(event=None):
    global fullscreen
    fullscreen = False
    root.attributes("-fullscreen", False)

def delete():
    sel = tree.selection()
    if not sel:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    animal_id = tree.item(sel[0])['values'][0]
    if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ —Å ID {animal_id}?"):
        database.delete_animal(animal_id)
        refresh_list()


# –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
root = tk.Tk()
root.title("–ü—Ä–∏—é—Ç: —É—á—ë—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö")
root.columnconfigure(2, weight=1)
fullscreen = False

# –†–∞–∑—Ä–µ—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –≤–µ—Å–∞ —Å–µ—Ç–∫–∏
root.rowconfigure(5, weight=1)
root.columnconfigure(0, weight=1)
root.columnconfigure(1, weight=1)
root.columnconfigure(2, weight=0)  # —Ç—Ä–µ—Ç—å—è –∫–æ–ª–æ–Ω–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π

# —Å—Ç—Ä–æ–∫–∞ 5 (–≥–¥–µ –±—É–¥–µ—Ç —Ç–∞–±–ª–∏—Ü–∞) —Ç–æ–∂–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
root.rowconfigure(5, weight=1)

# –ü–æ–ª—è –≤–≤–æ–¥–∞
frm_inputs = ttk.Frame(root, padding=(10, 10))
frm_inputs.grid(row=0, column=0, columnspan=2, sticky="ew")

for i in range(4):
    frm_inputs.columnconfigure(i, weight=1)

ttk.Label(frm_inputs, text="–ò–º—è").grid(row=0, column=0, sticky="w")
entry_name = ttk.Entry(frm_inputs)
entry_name.grid(row=0, column=1, sticky="ew", padx=5)

ttk.Label(frm_inputs, text="–í–∏–¥").grid(row=1, column=0, sticky="w")
entry_species = ttk.Entry(frm_inputs)
entry_species.grid(row=1, column=1, sticky="ew", padx=5)

ttk.Label(frm_inputs, text="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (YYYY-MM-DD)").grid(row=2, column=0, sticky="w")
entry_birth = ttk.Entry(frm_inputs)
entry_birth.grid(row=2, column=1, sticky="ew", padx=5)

ttk.Label(frm_inputs, text="–ò–õ–ò –æ—Ü–µ–Ω–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ (–º–µ—Å—è—Ü—ã)").grid(row=3, column=0, sticky="w")
entry_est = ttk.Entry(frm_inputs)
entry_est.grid(row=3, column=1, sticky="ew", padx=5)

ttk.Label(frm_inputs, text="–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è (YYYY-MM-DD)").grid(row=4, column=0, sticky="w")
entry_arrival = ttk.Entry(frm_inputs)
entry_arrival.grid(row=4, column=1, sticky="ew", padx=5)

# –ö–Ω–æ–ø–∫–∏
frm_buttons = ttk.Frame(root, padding=(10, 5))
frm_buttons.grid(row=4, column=0, columnspan=2, sticky="ew")
frm_buttons.columnconfigure(0, weight=1)
frm_buttons.columnconfigure(1, weight=1)

btn_add = ttk.Button(frm_buttons, text="–î–æ–±–∞–≤–∏—Ç—å", command=add)
btn_add.grid(row=0, column=0, sticky="ew", padx=5)
btn_refresh = ttk.Button(frm_buttons, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", command=refresh_list)
btn_refresh.grid(row=0, column=1, sticky="ew", padx=5)


# –¢–∞–±–ª–∏—Ü–∞
columns = ("ID", "–ò–º—è", "–í–∏–¥", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (YYYY-MM-DD)", "–í–æ–∑—Ä–∞—Å—Ç (–º–µ—Å.)", "–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è (YYYY-MM-DD)", "Del")
tree = ttk.Treeview(root, columns=columns, show='headings')
for idx, col in enumerate(columns):
    tree.heading(col, text=col)
    tree.column(col, anchor="center")
tree.grid(row=5, column=0, columnspan=2, sticky="nsew", padx=10, pady=5)
for col in columns:
    heading = col
    tree.heading(col, text=heading)

# –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º, –Ω–æ Del –æ—Å—Ç–∞—ë—Ç—Å—è —É–∑–∫–æ–π
tree.column("–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è (YYYY-MM-DD)", anchor="center")
tree.column("Del", width=30, anchor="center")

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
scroll = ttk.Scrollbar(root, orient="vertical", command=tree.yview)
tree.configure(yscroll=scroll.set)
scroll.grid(row=5, column=2, sticky="ns")

# –ü—Ä–∏–≤—è–∑–∫–∞ –∫–ª–∞–≤–∏—à –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
root.bind('<F11>', toggle_fullscreen)
root.bind('<Escape>', end_fullscreen)
tree.bind("<Button-1>", on_tree_click)
tree.bind("<Double-1>", on_double_click)

# –ó–∞–ø—É—Å–∫
refresh_list()
root.mainloop()

